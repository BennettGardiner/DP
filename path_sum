# Solves Problem 81 from projectEuler.net using Dynamic Programming

# data = [
#     [131, 673, 234, 103, 18],
#     [201, 96, 342, 965, 150],
#     [630, 803, 746, 422, 111],
#     [537, 699, 497, 121, 956],
#     [805, 732, 524, 37, 331]
# ]
data = []
with open('p081_matrix.txt') as f:
    for line_num, line in enumerate(f):
        data.append([int(num) for num in line.rstrip().split(',')])

num_rows = len(data[0])
num_cols = len(data)

costs = {}
def cost(row, col):
    key = str(row) + ':' + str(col)
    if key in costs.keys():
        return costs[key]
    else:
        if row == num_rows - 1 and col == num_cols - 1:
            costs[key] = data[row][col]
        elif row == num_rows - 1:
            costs[key] = sum([data[row][c] for c in range(col, num_cols)])
        elif col == num_cols - 1:
            costs[key] = sum([data[r][col] for r in range(row, num_rows)])
        else:
            costs[key] = data[row][col] + min(cost(row, col + 1), cost(row + 1, col))
        return costs[key]

print(cost(0, 0))
